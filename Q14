//Max Heap

#include <stdio.h>

#define MAX 100

void swap(int *a, int *b) 
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to heapify a subtree rooted at index i
void heapify(int arr[], int n, int i) {
    int largest = i; // Initialize largest as root
    int left = 2*i+1; // left = 2*i + 1
    int right = 2*i+2; // right = 2*i + 2
    // See if left child exists and is greater than root
    if (left < n && arr[left] > arr[largest])
        largest = left;
    // See if right child exists and is greater than root
    if (right < n && arr[right] > arr[largest])
        largest = right;
    // If largest is not root
    if (largest != i) 
    {
        swap(&arr[i], &arr[largest]);
        // Recursively heapify the affected subtree
        heapify(arr, n, largest);
    }
}

// Function to build a max heap
void buildMaxHeap(int arr[], int n) 
{
    // Start from the last non-leaf node and heapify each node
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
}


int main() {
    int arr[MAX];
    int n;
    printf("Enter the size of the array(<100): ");
    scanf("%d", &n);
    printf("Enter %d distinct elements: ", n);
    for (int i = 0; i < n; i++) 
    {
        scanf("%d", &arr[i]);
    }
    // Build max heap from the array
    buildMaxHeap(arr, n);
    // Print the max heap
    printf("\nRequired array: ");
    for (int i=0;i<n;i++)
        printf("%d ", arr[i]);
    return 0;
}
