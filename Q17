#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <stdlib.h>

#define MIN_PRIME 1000
#define MAX_PRIME 9999

// Function to check if a number is prime
bool is_prime(int num) {
    if (num <= 1) return false;
    if (num <= 3) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    for (int i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return false;
    }
    return true;
}

// Function to check if two numbers are permutations of each other
bool are_permutations(int a, int b) {
    char str1[5], str2[5];
    snprintf(str1, sizeof(str1), "%d", a);
    snprintf(str2, sizeof(str2), "%d", b);
    
    // Sort the characters of both strings
    qsort(str1, strlen(str1), sizeof(char), (int (*)(const void*, const void*)) strcmp);
    qsort(str2, strlen(str2), sizeof(char), (int (*)(const void*, const void*)) strcmp);
    
    return strcmp(str1, str2) == 0;
}

// Function to find the 4-digit arithmetic sequence
void find_arithmetic_sequence() {
    int primes[2000];
    int count = 0;
    
    // Generate all 4-digit primes
    for (int i = MIN_PRIME; i <= MAX_PRIME; i++) {
        if (is_prime(i)) {
            primes[count++] = i;
        }
    }
    
    // Check for the arithmetic sequences
    for (int i = 0; i < count; i++) {
        for (int j = i + 1; j < count; j++) {
            int diff = primes[j] - primes[i];
            int third = primes[j] + diff;
            
            if (third > MAX_PRIME) continue;
            
            if (is_prime(third) && are_permutations(primes[i], primes[j]) && are_permutations(primes[j], third)) {
                // Skip the known sequence
                if ((primes[i] == 1487 && primes[j] == 4817 && third == 8147) ||
                    (primes[i] == 1487 && primes[j] == 8147 && third == 4817) ||
                    (primes[i] == 4817 && primes[j] == 1487 && third == 8147) ||
                    (primes[i] == 4817 && primes[j] == 8147 && third == 1487) ||
                    (primes[i] == 8147 && primes[j] == 1487 && third == 4817) ||
                    (primes[i] == 8147 && primes[j] == 4817 && third == 1487)) {
                    continue;
                }
                // Print the result as a 12-digit number
                printf("The 12-digit number formed by concatenating the terms is: %d%d%d\n", primes[i], primes[j], third);
                return;
            }
        }
    }
}

int main() {
    find_arithmetic_sequence();
    return 0;
}
