//Millionth Permutaion

#include <stdio.h>
#include <stdlib.h>

#define N 10
#define K 1000000  // Millionth permutation

// Function to calculate factorial
unsigned long long factorial(int n) 
{
    unsigned long long result = 1;
    for (int i = 2; i <= n; i++) 
    {
        result *= i;
    }
    return result;
}

// Function to find the nth permutation
void find_permutation(int n, int k, int permutation[]) 
{
    int used[N] = {0};  // To keep track of used digits
    int index;
    unsigned long long fact = factorial(n - 1);

    k--;  // Convert to zero-based index

    for (int i = 0; i < n; i++) 
    {
        index = k / fact;
        k %= fact;
        // Find the index-th unused number
        int count = 0;
        for (int j = 0; j < n; j++) 
        {
            if (!used[j]) 
            {
                if (count == index) 
                {
                    permutation[i] = j;
                    used[j] = 1;
                    break;
                }
                count++;
            }
        }
        if (i<n-1) 
        {
            fact /= (n - 1 - i);
        }
    }
}

int main()
{
    int permutation[N];
    int n=N;
    int k=K;
    find_permutation(n, k, permutation);
    // Print the permutation
    printf("The %dth permutation is: ", K);
    for (int i = 0; i < n; i++) 
    {
        printf("%d", permutation[i]);
    }
    return 0;
}
